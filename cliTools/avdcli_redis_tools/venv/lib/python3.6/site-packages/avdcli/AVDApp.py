import json
import os

from getpass import getpass as gp
from plumbum import cli, colors

from avdlogger import lpl


class AVDApp(cli.Application):
    COLOR_MANDATORY = colors.bold & colors.yellow

    def __init__(self, *args):
        super().__init__(*args)
        self.username = ""
        self.password = ""
        self.log_filename = None
        self.lookup = dict()

    group = "0.0 Lookup file"

    @cli.switch("--lookup-file", str, group=group, help="Liste de fichier lookup à charger. ex: /root/f1.json,/home/test/test.json")
    def lookup_files_load(self, filenames):
        filenames = filenames.split(',')
        for filename in filenames:
            with open(filename, 'r') as lookup_file:
                self.lookup[os.path.basename(filename).split('.')[0]] = json.load(lookup_file)


    group = "0.1 Authenfication"

    @cli.switch(["-u", "--username"], str, group=group, help="Le nom de l'utilisateur")
    def user(self, username):
        self.username = username

    @cli.switch("--password-file", cli.ExistingFile, group=group, requires=["--username"],
                excludes=["-p", "--password"],
                help="Le fichier qui permet d'obtenir le mot de passe")
    def password_file(self, filename):
        with open(filename, 'r') as passfile:
            pass_map = json.load(passfile)
            self.password = '' if not self.username in pass_map.keys() else pass_map[self.username]

    @cli.switch(["-p", "--password"], str, group=group, requires=["--username"], excludes=["--password-file"],
                help="Le mot de passe en clair ou 'ask' pour obtenir un prompt")
    def get_password(self, password):
        if password == 'ask':
            self.password = gp(prompt='Entrer le mot de passe pour user {}: '.format(self.username))
        else:
            self.password = password

    group = "0.2 Logging"

    verbosity_level = cli.CountOf("-v", group=group, help="Donne le niveau de verbosité en comptant le nombre de 'v'")
    silent_logging = cli.Flag("--silent-logging", default=False, group=group,
                              help="Ne pas afficher les logs vers stdout")

    @cli.switch(["--log-filename"], str, group=group, help="Log vers un fichier.")
    def get_log_filename(self, filename):
        self.log_filename = os.path.expanduser(filename)

    def main(self):

        loglevel = lpl.logging.ERROR

        if self.verbosity_level >= 1:
            loglevel = lpl.logging.WARNING
        if self.verbosity_level >= 2:
            loglevel = lpl.logging.INFO
        if self.verbosity_level >= 3:
            loglevel = lpl.logging.DEBUG
        lpl.init_logger(self.__class__.__name__, to_stream=not self.silent_logging, level=loglevel,
                        to_file=self.log_filename)


if __name__ == "__main__":
    AVDApp.run()
