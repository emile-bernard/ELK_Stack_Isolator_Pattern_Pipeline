"""
This module initialize the python logging module as a singleton for all modules in your project.
"""
import sys
import logging
import inspect
import os

_logger = None
_logger_name = None


def init_logger(logger_name=None, to_stream=True, to_file=None, formatter=None, level=logging.DEBUG):
    """Init the logger"""
    global _logger
    global _logger_name

    stack_info = inspect.stack()
    caller_name = 'unknown_source'
    try:
        caller_name = os.path.basename(stack_info[0].filename)
    except (IndexError, AttributeError):
        pass
    _logger_name = logger_name if logger_name else caller_name
    _logger_name = _logger_name if _logger_name else __name__

    _logger = logging.getLogger(_logger_name)
    for handler in _logger.handlers:
        _logger.removeHandler(handler)
    _logger.setLevel(level)

    log_formatter = formatter if formatter else logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s')

    # create file handler which logs even debug messages
    if to_file:
        fh = logging.FileHandler(to_file)
        fh.setLevel(logging.DEBUG)
        fh.setFormatter(log_formatter)
        _logger.addHandler(fh)

    # create console handler with a higher log level
    if to_stream:
        ch = logging.StreamHandler()
        ch.setLevel(logging.DEBUG)
        ch.setFormatter(log_formatter)
        _logger.addHandler(ch)


def get_logger():
    global _logger
    return _logger


def set_logger(logger):
    global _logger
    _logger = logger


def create_sublogger(name):
    global _logger
    if not _logger:
        init_logger()
    return logging.getLogger('{}.{}'.format(_logger_name, name))


def string_it(args):
    s = None
    for a in args:
        if s is None:
            s = str(a)
        else:
            s = "{}, {}".format(s, a)
    return s


def debug(*args):
    msg = string_it(args)
    if not _logger:
        init_logger()
    _logger.debug(msg)


def info(*args):
    msg = string_it(args)
    if not _logger:
        init_logger()
    _logger.info(msg)


def warning(*args):
    msg = string_it(args)
    if not _logger:
        init_logger()
    _logger.warning(msg)


def error(*args):
    msg = string_it(args)
    if not _logger:
        init_logger()
    _logger.error(msg)


if __name__ == '__main__':
    init_logger()
    info('allo')
